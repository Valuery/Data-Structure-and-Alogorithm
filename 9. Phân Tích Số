Cho số nguyên dương N. Nhiệm vụ của bạn là hãy liệt kê tất cả các cách phân tích số tự nhiên N thành tổng các số tự nhiên nhỏ hơn hoặc bằng N. Phép hoán vị vủa một cách được xem là giống nhau. Ví dụ với N = 5 ta có kết quả là: (5), (4, 1), (3, 2), (3, 1, 1), (2, 2, 1), (2, 1, 1, 1), (1, 1, 1, 1, 1) .

Input:

Dòng đầu tiên đưa vào số lượng test T.
Những dòng kế tiếp đưa vào các bộ test. Mỗi bộ test là một số tự nhiên N được viết trên một dòng.
T, n thỏa mãn ràng buộc: 1≤T, N≤10.
Output:

Đưa ra kết quả mỗi test theo từng dòng.
Input

Output

2

4

5

(4) (3 1) (2 2) (2 1 1) (1 1 1 1)

(5) (4 1)  (3 2)  (3 1 1) (2 2 1)  (2 1 1 1)  (1 1 1 1 1)


#include <bits/stdc++.h>
#define MAX 10
using namespace std;
int X[MAX], n,k, OK=true; 
void Init(void){
	cin>>n; 
	OK=true;		
	k = 1;
	X[k] = n;
}
void Next_Division(void){
	int i = k,j,R,S,D;
	while (i>0 && X[i]==1) i--;
	if (i > 0)
	{
		X[i]=X[i]-1;
		D=k-i+1;
		R= D/X[i];
		S=D%X[i];
		k=i;
		if (R>0)
		{
			for (j = i+1; j<=i + R; j++) X[j]=X[i];
			k=k+R;
		}
		if (S>0){
			++k;
			X[k]=S;
		}
	}
	else OK = false;
}
void Result (void){
	
	for (int i=1; i<=k;i++){
		if (i==1) cout<<"(";
		cout<<X[i];
		if (i<k) cout<<" ";
		else cout << ") ";
	}
	
}
void Division(void){
	Init();
	while (OK){
		Result();
		Next_Division();
	}
	cout<<endl;
}
int main(){
	int t; cin>>t;
	while(t--){
		Division();
	}
	return 0;
}
